'use client'
import { MessagesContext } from '@/context/MessagesContext';
import { api } from '@/convex/_generated/api';
import Lookup from '@/data/Lookup';
import Prompt from '@/data/Prompt';
import { SandpackCodeEditor, SandpackFileExplorer, SandpackLayout, SandpackPreview, SandpackProvider } from '@codesandbox/sandpack-react';
import axios from 'axios';
import { useConvex, useMutation } from 'convex/react';
import { Loader2Icon } from 'lucide-react';
import { useParams } from 'next/navigation';
import React, { useContext, useEffect, useState } from 'react'
import { countToken } from './ChatView';
import { UserDetailContext } from '@/context/UserDetailContext';
import SandpackPreviewClient from './SandpackPreviewClient';

function CodeView() {
  const { id } = useParams();
  const [activeTab, setActiveTab] = useState('code')
  const { userDetail, setUserDetail } = useContext(UserDetailContext);
  const [files, setFiles] = useState(Lookup?.DEFAULT_FILE)
  const { messages, setMessages } = useContext(MessagesContext)
  const UpdateFiles = useMutation(api.workspace.UpdateFiles);
  const convex = useConvex();
  const [loading, setLoading] = useState(false)
  const UpdateToken = useMutation(api.workspace.UpdateToken);


  useEffect(() => {
    id && GetFiles();
  }, [id])

  const GetFiles = async () => {
    setLoading(true);
    const result = await convex.query(api.workspace.GetWorkspace, {
      workspaceId: id,
    });
    const mergedFiles = { ...Lookup.DEFAULT_FILE, ...result?.fileData };
    setFiles(mergedFiles)
    setLoading(false);
  }

  useEffect(() => {
    if (messages?.length > 0) {
      const role = messages[messages.length - 1]?.role
      if (role === 'user') {
        GenerateAiCode();
      }
    }
  }, [messages])

  const GenerateAiCode = async () => {
    setLoading(true);
    try {
      // Clear old files by setting files to an empty object
      setFiles({});

      const PROMPT = JSON.stringify(messages) + " " + Prompt.CODE_GEN_PROMPT;
      const result = await axios.post('/api/gen-ai-code', {
        prompt: PROMPT
      });
      console.log('AI Response:', result.data);

      const aiResp = result?.data;
      if (!aiResp) {
        console.error('AI response is undefined or null');
        setLoading(false);
        return; // Exit early if aiResp is undefined or null
      }

      if (aiResp?.files && Object.keys(aiResp.files).length > 0) {
        setFiles(aiResp.files);
        await UpdateFiles({
          workspaceId: id,
          files: aiResp.files,
        });
      } else {
        console.error('No files generated by AI response');
      }

      const token = Number(userDetail?.token) - Number(countToken(JSON.stringify(aiResp)));
      // Update token to database
      await UpdateToken({
        userId: userDetail?._id,
        token: token,
      });
      setUserDetail(prev => ({
        ...prev,
        token: token,
      }));
    } catch (error) {
      console.error('Error in GenerateAiCode:', error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className='relative'>
      <div className='bg-[#181818] w-full p-2 border'>
        <div className='flex items-center rounded-full flex-wrap shrink-0 justify-center bg-[#0d0b0b]  p-1 w-[140px] gap-3'>
          <h2 onClick={() => setActiveTab('code')}
            className={`text-sm cursor-pointer ${activeTab == 'code' ? 'text-blue-500 bg-blue-500/25 p-1 px-2 rounded-full' : ''}`}>Code</h2>
          <h2 onClick={() => setActiveTab('preview')}
            className={`text-sm cursor-pointer ${activeTab == 'preview' ? 'text-blue-500 bg-blue-500/25 p-1 px-2 rounded-full' : ''}`}>Preview</h2>
        </div>
      </div>
      <SandpackProvider
        files={files}
        template='react' theme={'dark'}
        customSetup={{
          dependencies: {
            ...Lookup.DEPENDANCY
          }
        }}
        options={{
          externalResources: ['https://cdn.tailwindcss.com'],
        }}
      >
        <SandpackLayout>
          {activeTab == 'code' ? <>
            <SandpackFileExplorer style={{ height: '80vh' }} />
            <SandpackCodeEditor style={{ height: '80vh' }} />
          </> :
            <>
              <SandpackPreviewClient />
            </>
          }
        </SandpackLayout>
      </SandpackProvider>
      {loading && <div className='p-10 bg-gray-900 opacity-80 absolute top-0 rounded-lg w-full h-full flex items-center justify-center'>
        <Loader2Icon className='animate-spin h-10 w-10 text-white' />
        <h2 className='text-white'>Generating your files...</h2>
      </div>}
    </div>
  )
}

export default CodeView